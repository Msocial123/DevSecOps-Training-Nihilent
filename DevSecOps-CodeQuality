pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('Sonar_Tocken')
        SONAR_SCANNER_HOME = '/opt/sonar-scanner'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/Msocial123/maven-web-application.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube-Server') {
                    sh """
                        ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                          -Dsonar.projectKey=maven-web-application \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=$SONAR_HOST_URL \
                          -Dsonar.login=$SONAR_TOKEN
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Build and SonarQube Analysis Passed Successfully."
        }

        unstable {
            echo "‚ö†Ô∏è Build is unstable. Please review quality gate and test results."
        }

        failure {
            echo "‚ùå Build failed. Check logs and SonarQube report."
        }

        always {
            echo "üîç Post-build actions completed."
        }
    }
}
